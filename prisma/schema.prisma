generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                  @id @default(autoincrement()) @db.SmallInt
  first_name       String               @db.VarChar(255)
  last_name        String               @db.VarChar(255)
  email            String               @unique @db.VarChar(255)
  verified_email   Boolean              @default(false) @db.Boolean
  username         String               @unique @db.VarChar(255)
  password_salt    String               @db.VarChar(255)
  password         String               @db.VarChar(255)
  birth_date       DateTime             @db.Date
  phone_number     String               @db.VarChar(100)
  address          String               @db.Text
  document_id      String               @unique @db.VarChar(40)
  is_bookable      Boolean              @default(false) @db.Boolean
  user_pictures    Json?                @db.JsonB
  // Reg fields
  document_type_id Int                  @db.SmallInt
  status_id        Int                  @default(1) @db.SmallInt
  user_type_id     Int                  @default(1) @db.SmallInt
  created_at       DateTime             @default(now()) @db.Date
  updated_at       DateTime?            @updatedAt @db.Date
  // Relations
  Document_Type    Document_type        @relation(fields: [document_type_id], references: [id])
  Status           User_status          @relation(fields: [status_id], references: [id])
  User_Type        User_type            @relation(fields: [user_type_id], references: [id])
  Sessions         Session[]
  Booked_By        Booking[]            @relation("Booked_By")
  Booked_From      Booking[]            @relation("Booked_From")
  Schedule         Schedule[]
  Feedback_From    Feedback[]           @relation("FeedbackFrom")
  Feedback_To      Feedback[]           @relation("FeedbackTo")
  Business         Business[]           @relation("Owner")
  Expertise        Expertise[]
  QueueEntry       QueueEntry[]
  OAuthAccount     OAuthAccount[]
  Tokens           TemporalTokens[]
  Employees        Business_employees[]
}

model Session {
  id         String   @id @default(uuid()) @db.VarChar(255)
  user_id    Int      @db.SmallInt
  expires_at Int      @db.Integer
  created_at DateTime @default(now()) @db.Date
  User       User     @relation(fields: [user_id], references: [id])
}

model TemporalTokens {
  id           Int        @id @default(autoincrement()) @db.Integer
  user_id      Int        @db.Integer
  hashed_token String     @db.VarChar(80)
  expires_at   DateTime
  token_type   Int        @db.Integer
  created_time DateTime   @default(now())
  User         User       @relation(references: [id], fields: [user_id], onDelete: Cascade)
  Type         Token_type @relation(fields: [token_type], references: [id])
}

model OAuthAccount {
  id                  Int           @id @default(autoincrement()) @db.Integer
  provider_id         Int           @db.SmallInt
  provider_account_id String
  user_id             Int           @db.Integer
  User                User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Provider            Provider_type @relation(fields: [provider_id], references: [id])

  @@unique([provider_id, provider_account_id])
}

model Service {
  id          Int                 @id @default(autoincrement()) @db.SmallInt
  name        String              @db.VarChar(255)
  description String?             @db.Text
  base_price  Decimal             @db.Money
  created_at  DateTime            @default(now()) @db.Date
  updated_at  DateTime?           @updatedAt @db.Date
  Bookings    Booking[]
  Business    Business_Services[]
}

model Schedule {
  id           Int       @id @default(autoincrement()) @db.SmallInt
  date         DateTime  @db.Date
  start_time   DateTime  @db.Date
  end_time     DateTime  @db.Date
  is_available Boolean   @default(false) @db.Boolean
  user_id      Int       @db.SmallInt
  created_at   DateTime  @default(now()) @db.Date
  updated_at   DateTime? @updatedAt @db.Date
  User         User      @relation(fields: [user_id], references: [id])
}

model Booking {
  id          Int            @id @default(autoincrement()) @db.SmallInt
  date        DateTime       @db.Date
  start_time  DateTime       @db.Time
  end_time    DateTime       @db.Time
  // Reg Fields
  user_id     Int            @db.SmallInt // The user who makes the booking
  bookable_id Int            @db.SmallInt // The user who is being booked  
  service_id  Int            @db.SmallInt
  status_id   Int            @db.SmallInt
  business_id Int            @db.SmallInt
  created_at  DateTime       @default(now()) @db.Date
  updated_at  DateTime?      @updatedAt @db.Date
  // Relations
  Booked_By   User           @relation("Booked_By", fields: [user_id], references: [id])
  Booked_From User           @relation("Booked_From", fields: [bookable_id], references: [id])
  Status      Booking_Status @relation(fields: [status_id], references: [id])
  Service     Service        @relation(fields: [service_id], references: [id])
  Business    Business       @relation(fields: [business_id], references: [id])
}

model Queue {
  id           Int          @id @default(autoincrement()) @db.SmallInt
  open_from    DateTime     @db.Time
  open_to      DateTime     @db.Time
  // Reg Fields
  business_id  Int          @db.SmallInt
  status_id    Int          @db.SmallInt
  created_at   DateTime     @default(now()) @db.Date
  updated_at   DateTime?    @updatedAt @db.Date
  // Relations
  Business     Business     @relation(fields: [business_id], references: [id])
  QueueEntries QueueEntry[]
}

model QueueEntry {
  id         Int       @id @default(autoincrement()) @db.SmallInt
  position   Int       @db.SmallInt
  // Reg Fields
  queue_id   Int       @db.SmallInt
  user_id    Int       @db.SmallInt
  created_at DateTime  @default(now()) @db.Date
  updated_at DateTime? @updatedAt @db.Date
  // Relations
  Queue      Queue     @relation(fields: [queue_id], references: [id])
  User       User      @relation(fields: [user_id], references: [id])
}

model Expertise {
  id         Int       @id @default(autoincrement()) @db.SmallInt
  name       String    @db.VarChar(255)
  user_id    Int       @db.SmallInt
  created_at DateTime  @default(now()) @db.Date
  updated_at DateTime? @updatedAt @db.Date
  User       User      @relation(fields: [user_id], references: [id])
}

model Business {
  id                Int                  @id @default(autoincrement()) @db.SmallInt
  name              String               @db.VarChar(255)
  description       String?              @db.Text
  address           String               @db.Text
  phone_number      String               @unique @db.VarChar(100)
  email             String               @unique @db.VarChar(255)
  open_from         DateTime             @db.Time
  open_to           DateTime             @db.Time
  pictures          Json?                @db.JsonB
  // Reg fields
  owner_id          Int                  @db.SmallInt
  bussiness_type_id Int                  @db.SmallInt
  created_at        DateTime             @default(now()) @db.Date
  updated_at        DateTime?            @updatedAt @db.Date
  // Relations
  Bussiness_Type    Business_type        @relation(fields: [bussiness_type_id], references: [id])
  Owner             User                 @relation("Owner", fields: [owner_id], references: [id])
  Queue             Queue[]
  Bookings          Booking[]
  Employees         Business_employees[]
  Services          Business_Services[]
}

model Business_employees {
  id          Int       @id @default(autoincrement()) @db.Integer
  business_id Int       @db.Integer
  employee_id Int       @db.Integer
  created_at  DateTime  @default(now()) @db.Date
  updated_at  DateTime? @updatedAt @db.Date
  Business    Business  @relation(fields: [business_id], references: [id])
  Employee    User      @relation(fields: [employee_id], references: [id])
}

model Business_Services {
  id          Int      @id @default(autoincrement()) @db.Integer
  price       Decimal  @db.Money
  business_id Int      @db.Integer
  service_id  Int      @db.Integer
  Business    Business @relation(fields: [business_id], references: [id])
  Service     Service  @relation(fields: [service_id], references: [id])
}

model Feedback {
  id           Int       @id @default(autoincrement()) @db.SmallInt
  comment      String?   @db.Text
  rating       Int       @db.Integer
  user_id      Int       @db.SmallInt
  from_user_id Int       @db.SmallInt
  to_user_id   Int       @db.SmallInt
  created_at   DateTime  @default(now()) @db.Date
  updated_at   DateTime? @updatedAt @db.Date
  From_user    User      @relation("FeedbackFrom", fields: [from_user_id], references: [id])
  To_user      User      @relation("FeedbackTo", fields: [to_user_id], references: [id])
}

model Short_links {
  id           String    @id @default(cuid()) @db.VarChar(70)
  original_url String    @db.Text
  short_code   String    @unique @db.VarChar(20)
  clicks       Int       @default(0) @db.Integer
  // Reg fields
  link_type_id Int       @db.SmallInt
  created_at   DateTime  @default(now()) @db.Date
  updated_at   DateTime  @updatedAt @db.Date
  // Relations
  Type         Link_type @relation(fields: [link_type_id], references: [id])

  @@index([short_code])
}

model Temporal_short_links {
  id           String    @id @default(cuid()) @db.VarChar(70)
  original_url String    @db.Text
  short_code   String    @unique @db.VarChar(20)
  // Reg fields
  link_type_id Int       @db.SmallInt
  expires_at   Int       @db.Integer
  created_at   DateTime  @default(now()) @db.Date
  // Relations
  Type         Link_type @relation(fields: [link_type_id], references: [id])

  @@index([short_code])
}

// Type models -> Regulatory models

model Token_type {
  id             Int              @id @default(autoincrement()) @db.Integer
  name           String           @db.VarChar(255)
  create_time    DateTime         @default(now()) @db.Date
  update_time    DateTime         @updatedAt @db.Date
  TemporalTokens TemporalTokens[]
}

model Provider_type {
  id           Int            @id @default(autoincrement()) @db.Integer
  name         String         @db.VarChar(255)
  create_time  DateTime       @default(now()) @db.Date
  update_time  DateTime       @updatedAt @db.Date
  OAuthAccount OAuthAccount[]
}

model Document_type {
  id          Int      @id @default(autoincrement()) @db.SmallInt
  name        String   @db.VarChar(30)
  create_time DateTime @default(now()) @db.Date
  update_time DateTime @updatedAt @db.Date
  Users       User[]
}

model User_status {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  name       String   @db.VarChar(60)
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date
  User       User[]
}

model User_type {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  name       String   @db.VarChar(60)
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date
  User       User[]
}

model Booking_Status {
  id         Int       @id @default(autoincrement()) @db.SmallInt
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Date
  updated_at DateTime? @updatedAt @db.Date
  Booking    Booking[]
}

model Business_type {
  id         Int        @id @default(autoincrement()) @db.SmallInt
  name       String     @db.VarChar(60)
  created_at DateTime   @default(now()) @db.Date
  updated_at DateTime   @updatedAt @db.Date
  Business   Business[]
}

model Link_type {
  id             Int                    @id @default(autoincrement()) @db.SmallInt
  name           String                 @db.VarChar(60)
  created_at     DateTime               @default(now()) @db.Date
  updated_at     DateTime               @updatedAt @db.Date
  Links          Short_links[]
  Temporal_Links Temporal_short_links[]
}
