generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement()) @db.SmallInt
  first_name        String              @db.VarChar(255)
  last_name         String              @db.VarChar(255)
  email             String              @unique @db.VarChar(255)
  verified_email    Boolean             @default(false) @db.Boolean
  password_salt     String              @db.VarChar(255)
  password          String              @db.VarChar(255)
  document_id       String              @unique @db.VarChar(40)
  // Reg fields
  document_type_id  Int                 @db.SmallInt
  status_id         Int                 @default(1) @db.SmallInt
  user_type_id      Int                 @default(1) @db.SmallInt
  speaker_id        Int?                @db.SmallInt
  created_at        DateTime            @default(now()) @db.Date
  updated_at        DateTime?           @updatedAt @db.Date
  // Relations
  Document_Type     Document_type       @relation(fields: [document_type_id], references: [id])
  Status            User_status         @relation(fields: [status_id], references: [id])
  User_Type         User_type           @relation(fields: [user_type_id], references: [id])
  Speaker_Profile   Speakers?           @relation(fields: [speaker_id], references: [id])
  Sessions          Session[]
  Tokens            TemporalTokens[]
  Book_Reservations Book_Reservations[]
  Trainings         Training_audience[]
  Reservations      Room_reservations[]
}

model Session {
  id         String   @id @default(uuid()) @db.VarChar(255)
  user_id    Int      @db.SmallInt
  expires_at Int      @db.Integer
  created_at DateTime @default(now()) @db.Date
  User       User     @relation(fields: [user_id], references: [id])
}

model TemporalTokens {
  id           Int        @id @default(autoincrement()) @db.Integer
  user_id      Int        @db.Integer
  hashed_token String     @db.VarChar(80)
  expires_at   DateTime
  token_type   Int        @db.Integer
  created_time DateTime   @default(now())
  User         User       @relation(references: [id], fields: [user_id], onDelete: Cascade)
  Type         Token_type @relation(fields: [token_type], references: [id])
}

model Books {
  id             Int                 @id @default(autoincrement()) @db.Integer
  name           String              @db.VarChar(255)
  year           DateTime            @db.Date
  copies         Int                 @db.SmallInt
  isbn           String              @unique @db.VarChar(30)
  description    String              @db.Text
  // Reg fields
  author_id      Int                 @db.Integer
  book_status_id Int                 @db.SmallInt
  editorial_id   Int                 @db.Integer
  languague_id   Int                 @db.SmallInt
  create_time    DateTime            @default(now()) @db.Date
  update_time    DateTime            @updatedAt @db.Date
  // Relations
  Author         Authors             @relation(fields: [author_id], references: [id])
  Status         Book_status         @relation(fields: [book_status_id], references: [id])
  Languague      Languagues          @relation(fields: [languague_id], references: [id])
  Editorials     Editorials          @relation(fields: [editorial_id], references: [id])
  Genres         Book_genres[]
  Reservations   Book_Reservations[]
}

model EBooks {
  id              Int            @id @default(autoincrement()) @db.Integer
  name            String         @db.VarChar(255)
  year            DateTime       @db.Date
  description     String         @db.Text
  total_downloads Int            @db.Integer
  file_src        String         @db.Text
  // Reg fields
  author_id       Int            @db.Integer
  editorial_id    Int            @db.Integer
  languague_id    Int            @db.SmallInt
  create_time     DateTime       @default(now()) @db.Date
  update_time     DateTime       @updatedAt @db.Date
  // Relations
  Author          Authors        @relation(fields: [author_id], references: [id])
  Languague       Languagues     @relation(fields: [languague_id], references: [id])
  Editorial       Editorials     @relation(fields: [editorial_id], references: [id])
  Genres          EBook_genres[]
}

model Genre {
  id          Int            @id @default(autoincrement()) @db.SmallInt
  name        String         @db.VarChar(255)
  // Reg fields
  create_time DateTime       @default(now()) @db.Date
  update_time DateTime       @updatedAt @db.Date
  // Relations
  Books       Book_genres[]
  EBooks      EBook_genres[]
}

model Book_genres {
  book_id  Int   @db.Integer
  genre_id Int   @db.SmallInt
  Book     Books @relation(fields: [book_id], references: [id], onDelete: Cascade)
  Genre    Genre @relation(fields: [genre_id], references: [id], onDelete: Cascade)

  @@id([book_id, genre_id]) // Composite primary key
}

model EBook_genres {
  ebook_id Int    @db.Integer
  genre_id Int    @db.SmallInt
  Book     EBooks @relation(fields: [ebook_id], references: [id], onDelete: Cascade)
  Genre    Genre  @relation(fields: [genre_id], references: [id], onDelete: Cascade)

  @@id([ebook_id, genre_id]) // Composite primary key
}

model Authors {
  id          Int      @id @default(autoincrement()) @db.Integer
  first_name  String   @db.VarChar(255)
  last_name   String   @db.VarChar(255)
  // Reg fields
  create_time DateTime @default(now()) @db.Date
  update_time DateTime @updatedAt @db.Date
  // Relations
  Books       Books[]
  EBooks      EBooks[]
}

model Book_Reservations {
  id          Int      @id @default(autoincrement()) @db.Integer
  from        DateTime @db.Date
  return_date DateTime @db.Date
  // Reg fields
  book_id     Int      @db.Integer
  user_id     Int      @db.SmallInt
  create_time DateTime @default(now()) @db.Date
  update_time DateTime @updatedAt @db.Date
  // Relations  
  Book        Books    @relation(fields: [book_id], references: [id])
  User        User     @relation(fields: [user_id], references: [id])
}

model Editorials {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String   @db.VarChar(255)
  // Reg fields
  create_time DateTime @default(now()) @db.Date
  update_time DateTime @updatedAt @db.Date
  // Relations  
  Book        Books[]
  EBooks      EBooks[]
}

model Languagues {
  id          Int      @id @default(autoincrement()) @db.Integer
  name        String   @db.VarChar(255)
  // Reg fields
  create_time DateTime @default(now()) @db.Date
  update_time DateTime @updatedAt @db.Date
  // Relations  
  Book        Books[]
  EBooks      EBooks[]
}

model Trainings {
  id            Int                 @id @default(autoincrement()) @db.Integer
  name          String              @db.VarChar(255)
  // Reg fields
  speaker_id    Int                 @db.Integer
  study_room_id Int                 @db.Integer
  create_time   DateTime            @default(now()) @db.Date
  update_time   DateTime            @updatedAt @db.Date
  // Relations
  Room          Study_room          @relation(fields: [study_room_id], references: [id])
  Speakers      Speakers_training[]
  Audience      Training_audience[]
}

model Speakers {
  id          Int                 @id @default(autoincrement()) @db.Integer
  first_name  String              @db.VarChar(255)
  last_name   String              @db.VarChar(255)
  // Reg fields
  create_time DateTime            @default(now()) @db.Date
  update_time DateTime            @updatedAt @db.Date
  // Relations  
  Trainings   Speakers_training[]
  User_Data   User[]
}

model Study_room {
  id                    Int                 @id @default(autoincrement()) @db.Integer
  name                  String              @db.VarChar(255)
  max_personel_per_room Int                 @default(1) @db.Integer
  // Reg fields
  status_id             Int                 @db.SmallInt
  create_time           DateTime            @default(now()) @db.Date
  update_time           DateTime            @updatedAt @db.Date
  // Relations  
  Status                Study_room_status   @relation(fields: [status_id], references: [id])
  Trainings             Trainings[]
  Reservations          Room_reservations[]
}

model Room_reservations {
  id               Int        @id @default(autoincrement()) @db.Integer
  personal         Int        @db.SmallInt
  motive           String     @db.Text
  reservation_date DateTime   @db.Date
  start_hours      DateTime   @db.Time()
  end_hours        DateTime   @db.Time()
  // Reg fields
  room_id          Int        @db.SmallInt
  user_id          Int        @db.Integer
  create_time      DateTime   @default(now()) @db.Date
  update_time      DateTime   @updatedAt @db.Date
  // Relations  
  Room             Study_room @relation(fields: [room_id], references: [id])
  Responsible      User       @relation(fields: [user_id], references: [id])
}

model Speakers_training {
  speaker_id  Int       @db.Integer
  training_id Int       @db.SmallInt
  Speakers    Speakers  @relation(fields: [speaker_id], references: [id], onDelete: Cascade)
  Trainings   Trainings @relation(fields: [training_id], references: [id], onDelete: Cascade)

  @@id([speaker_id, training_id]) // Composite primary key
}

model Training_audience {
  training_id Int
  user_id     Int
  Users       User      @relation(fields: [user_id], references: [id])
  Trainings   Trainings @relation(fields: [training_id], references: [id])

  @@id([training_id, user_id]) // Composite primary key
}

// Type models -> Regulatory models

model Token_type {
  id             Int              @id @default(autoincrement()) @db.SmallInt
  name           String           @db.VarChar(255)
  create_time    DateTime         @default(now()) @db.Date
  update_time    DateTime         @updatedAt @db.Date
  TemporalTokens TemporalTokens[]
}

model Document_type {
  id          Int      @id @default(autoincrement()) @db.SmallInt
  name        String   @db.VarChar(30)
  create_time DateTime @default(now()) @db.Date
  update_time DateTime @updatedAt @db.Date
  Users       User[]
}

model User_status {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  name       String   @db.VarChar(60)
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date
  User       User[]
}

model Book_status {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  name       String   @db.VarChar(60)
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date
  Books      Books[]
}

model Study_room_status {
  id         Int          @id @default(autoincrement()) @db.SmallInt
  name       String       @db.VarChar(60)
  created_at DateTime     @default(now()) @db.Date
  updated_at DateTime     @updatedAt @db.Date
  Study_room Study_room[]
}

model User_type {
  id         Int      @id @default(autoincrement()) @db.SmallInt
  name       String   @db.VarChar(60)
  created_at DateTime @default(now()) @db.Date
  updated_at DateTime @updatedAt @db.Date
  User       User[]
}
